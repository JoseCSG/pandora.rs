use std::collections::HashMap;
use crate::compiler::tokens::{Token, LexicalError};
use crate::compiler::semantic_cube;
use crate::compiler::semantic_tables;
use crate::compiler::program_manager::ProgramManager;
use crate::compiler::quadruplets::{QuadOperator, convert_semantic_op_to_quad_op};
use crate::utils::queue::{Queue};

grammar<'input>(program_manager: &'input mut ProgramManager);

extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    "program" => Token::Program,
    "main" => Token::Main,
    "end" => Token::End,
    "print" => Token::Print,
    "var" => Token::Var,
    "void" => Token::Void,
    "while" => Token::While,
    "do" => Token::Do,
    "if" => Token::If,
    "else" => Token::Else,
    "id" => Token::Id(_String),
    "intType" => Token::IntDatatype,
    "floatType" => Token::FloatDatatype,
    "number" => Token::Number(_i32),
    "float" => Token::Float(_f32),
    "string" => Token::String(_String),
    "+" => Token::OpAdd,
    "-" => Token::OpSub,
    "*" => Token::OpMul,
    "/" => Token::OpDiv,
    ">" => Token::Gt,
    "<" => Token::Lt,
    "!=" => Token::Ne,
    "=" => Token::Eq,
    ":" => Token::Colon,
    ";" => Token::Semicolon,
    "," => Token::Comma,
    "(" => Token::LParen,
    ")" => Token::RParen,
    "{" => Token::LBrace,
    "}" => Token::RBrace,
    "[" => Token::LBracket,
    "]" => Token::RBracket,
    "." => Token::Dot,
  }

}

Cte: () = {
  <val: "number"> => {
    let cte_val = match val {
      Token::Number(ref num) => num.clone(),
      _ => panic!("Invalid constant"),
    };

    let address;

    if program_manager.tabla_funciones.get("main").unwrap().vars.contains_key(&cte_val.to_string().clone()) {
      address = program_manager.tabla_funciones.get_mut("main").unwrap().vars.get(&cte_val.to_string().clone()).unwrap().address;
    } else {
      address = program_manager.value_table.insert_cte_int(cte_val);
      let cte_info = semantic_tables::VariableInfo 
        { value: semantic_tables::VarValue::Int(cte_val), var_type: semantic_tables::VarType::Int,
          name: cte_val.to_string().clone(), address: address  };
      program_manager.tabla_funciones.get_mut("main").unwrap().vars.insert(cte_val.to_string(), cte_info);
    }
      program_manager.operand_stack.push(address);
      program_manager.polish_vector.push(address.to_string());
  },
  <val: "float"> => {
    let cte_val = match val {
      Token::Float(ref num) => num.clone(),
      _ => panic!("Invalid constant"),
    };

    let address;

    if program_manager.tabla_funciones.get("main").unwrap().vars.contains_key(&cte_val.to_string().clone()) {
      address = program_manager.tabla_funciones.get_mut("main").unwrap().vars.get(&cte_val.to_string().clone()).unwrap().address;
    } else {
      address = program_manager.value_table.insert_cte_float(cte_val);
      let cte_info = semantic_tables::VariableInfo 
        { value: semantic_tables::VarValue::Float(cte_val), var_type: semantic_tables::VarType::Float,
          name: cte_val.to_string().clone(), address: address  };

      program_manager.tabla_funciones.get_mut("main").unwrap().vars.insert(cte_val.to_string(), cte_info);
    }

    program_manager.operand_stack.push(address);
    program_manager.polish_vector.push(address.to_string());
  }
}

CteString: () = {
  <val: "string"> => {
    let str_val =match val {
      Token::String(ref str) => str.clone(),
      _ => panic!("Invalid constant"),
    };
    let temp_address = program_manager.value_table.insert_cte_string(str_val.clone());
    program_manager.operand_stack.push(temp_address);
  },
}

OpAditivo: semantic_cube::Operator = {
  <op: "+"> => {
    program_manager.operator_stack.push(semantic_cube::Operator::Add);
    semantic_cube::Operator::Add
  },
  <op: "-"> => {
    program_manager.operator_stack.push(semantic_cube::Operator::Subtract);
    semantic_cube::Operator::Subtract
  }
}

OpMultiplicativo: semantic_cube::Operator = {
  <op: "*"> => {
    program_manager.operator_stack.push(semantic_cube::Operator::Multiply);
    semantic_cube::Operator::Multiply
  },
  <op: "/"> => {
    program_manager.operator_stack.push(semantic_cube::Operator::Divide);
    semantic_cube::Operator::Divide
  },
}

OpLogico: semantic_cube::Operator = {
  <op: "<"> => {
    program_manager.operator_stack.push(semantic_cube::Operator::LessThan);
    semantic_cube::Operator::LessThan
  },
  <op: ">"> => {
    program_manager.operator_stack.push(semantic_cube::Operator::GreaterThan);
    semantic_cube::Operator::GreaterThan
  },
  <op: "!="> => {
    program_manager.operator_stack.push(semantic_cube::Operator::NotEqual);
    semantic_cube::Operator::NotEqual
  },
}

pub Expresion: () = {
  <left: Exp> <op: OpLogico> <right: Exp> => {
    let right_address = program_manager.operand_stack.pop().unwrap();
    let left_address = program_manager.operand_stack.pop().unwrap();
    
    let right_type = program_manager.value_table.get_var_type(right_address);  
    let left_type =  program_manager.value_table.get_var_type(left_address);
    let res_type = program_manager.cubo.get_type(left_type, op, right_type);

    let temp_address = match res_type {
      semantic_cube::Type::Int => program_manager.new_temp(semantic_cube::Type::Int),
      semantic_cube::Type::Float => program_manager.new_temp(semantic_cube::Type::Float),
      semantic_cube::Type::Bool => program_manager.new_temp(semantic_cube::Type::Bool),
      _ => panic!("Invalid type"),
    };

    let quad_op = convert_semantic_op_to_quad_op(op);

    program_manager.create_quad(quad_op, left_address, Some(right_address), Some(temp_address));
    program_manager.operand_stack.push(temp_address);
    program_manager.polish_vector.clear();
  },
  <exp: Exp> => {

  },
};

Exp: () = {
  <left: Exp> <op: OpAditivo> <right: Termino> => {
    let right_address = program_manager.operand_stack.pop().unwrap();
    let left_address = program_manager.operand_stack.pop().unwrap();

    let left_type = program_manager.value_table.get_var_type(left_address);
    let right_type = program_manager.value_table.get_var_type(right_address);
    let res_type = program_manager.cubo.get_type(left_type, op, right_type);

    let temp_address = match res_type {
      semantic_cube::Type::Int => program_manager.new_temp(semantic_cube::Type::Int),
      semantic_cube::Type::Float => program_manager.new_temp(semantic_cube::Type::Float),
      semantic_cube::Type::Bool => program_manager.new_temp(semantic_cube::Type::Bool),
      _ => panic!("Invalid type"),
    };

    let op_str = match op {
      semantic_cube::Operator::Add => "+",
      semantic_cube::Operator::Subtract => "-",
      _ => panic!("Invalid operator"),
    };

    program_manager.polish_vector.push(op_str.to_string());
    let quad_op = convert_semantic_op_to_quad_op(op); 

    program_manager.create_quad(quad_op, left_address, Some(right_address), Some(temp_address));
    program_manager.operand_stack.push(temp_address);
  },
  <term: Termino> => {

  },
}

Termino: () = {
  <left: Termino> <op: OpMultiplicativo> <right: Factor> => {
    let right_address = program_manager.operand_stack.pop().unwrap();
    let left_address = program_manager.operand_stack.pop().unwrap();

    let left_type = program_manager.value_table.get_var_type(left_address);
    let right_type = program_manager.value_table.get_var_type(right_address);
    let res_type = program_manager.cubo.get_type(left_type, op, right_type);

    let temp_address = match res_type {
      semantic_cube::Type::Int => program_manager.new_temp(semantic_cube::Type::Int),
      semantic_cube::Type::Float => program_manager.new_temp(semantic_cube::Type::Float),
      semantic_cube::Type::Bool => program_manager.new_temp(semantic_cube::Type::Bool),
      _ => panic!("Invalid type"),
    };

    let quad_op = convert_semantic_op_to_quad_op(op);
    program_manager.create_quad(quad_op, left_address, Some(right_address), Some(temp_address));

    let op_str = match op {
      semantic_cube::Operator::Multiply => "*",
      semantic_cube::Operator::Divide => "/",
      _ => panic!("Invalid operator"),
    };

    program_manager.polish_vector.push(op_str.to_string());
    program_manager.operand_stack.push(temp_address);
  },
  <factor: Factor> => {

  }
}

NegativeSign: Option<()> = {
  "-" => Some(()),
  => None,
}

Factor: () = {
  "(" <exp: Expresion> ")" => exp,
  <val: Id> => {
    let current_function = program_manager.curr_function.top().unwrap();

    let var_info = match program_manager.tabla_funciones.get(current_function.as_str()).unwrap().vars.get(&val) {
      Some(info) => info,
      None => match program_manager.tabla_funciones.get("main").unwrap().vars.get(&val) {
        Some(info) => info,
        None => panic!("There's no variable {}", val),
      }
    };
    program_manager.operand_stack.push(var_info.address);
    program_manager.polish_vector.push(var_info.name.clone());
    let var_type = match var_info.var_type {
      semantic_tables::VarType::Int => semantic_cube::Type::Int,
      semantic_tables::VarType::Float => semantic_cube::Type::Float,
    };
  },
  <negative_sign:NegativeSign> <val: Cte> => {
      if negative_sign.is_some() {
        let negative_address;
        if program_manager.tabla_funciones.get("main").unwrap().vars.contains_key("-1") {
          negative_address = program_manager.tabla_funciones.get("main").unwrap().vars.get("-1").unwrap().address;
        } else {
          negative_address = program_manager.value_table.insert_cte_int(-1);
          let negative_var_info = semantic_tables::VariableInfo {
            name: "-1".to_string(),
            address: negative_address,
            value: semantic_tables::VarValue::Int(-1),
            var_type: semantic_tables::VarType::Float  
          };
          program_manager.tabla_funciones.get_mut("main").unwrap().vars.insert("-1".to_string(), negative_var_info);
        }


        let address = program_manager.operand_stack.pop().unwrap();
        let op_type = program_manager.value_table.get_var_type(address);

        let temp_address = program_manager.new_temp(op_type);
        program_manager.create_quad(QuadOperator::Multiply, negative_address, Some(address), Some(temp_address));
        program_manager.operand_stack.push(temp_address);

      }
  }
}

Statement: () = {
  Assign,
  Condition,
  Cycle,
  Print,
  FCall,
}

Assign: () = {
  <id: Id> "=" <exp: Expresion> ";" => {
    let var_info = match program_manager.tabla_funciones.get(program_manager.curr_function.top().unwrap().as_str()).unwrap().vars.get(&id) {
      Some(info) => info,
      None => match program_manager.tabla_funciones.get("main").unwrap().vars.get(&id) {
        Some(info) => info,
        None => panic!("There's no variable {}", id),
      }
    };
    let temp_address = program_manager.operand_stack.pop().unwrap();

    let temp_type = program_manager.value_table.get_var_type(temp_address);
    let var_type = match var_info.var_type {
      semantic_tables::VarType::Int => semantic_cube::Type::Int,
      semantic_tables::VarType::Float => semantic_cube::Type::Float,
    };

    if temp_type != var_type {
      panic!("Types must be the same to assign values");
    };

    program_manager.create_quad(QuadOperator::Assign, var_info.address, Some(temp_address), None);
    program_manager.polish_vector.clear();
  },
}

ExpList: () = {
  <start: Expresion> <rest: ("," <Expresion>)*> => {
    let mut temp_queue = Queue::new();
    while program_manager.operand_stack.len() != 0 {
      let temp_address = program_manager.operand_stack.pop().unwrap();
      temp_queue.push(temp_address);
    }
    while temp_queue.len() != 0 {
      program_manager.operand_stack.push(temp_queue.pop().unwrap());
    }
  },
  => {}
}


PrintPrime: () = {
  CteString,
  ExpList => {
    program_manager.polish_vector.clear();
  },
}

Print: () = {
  "print" "(" <exps: PrintPrime> ")" ";" => {
    while program_manager.operand_stack.len() != 0 {
      let temp_address = program_manager.operand_stack.pop().unwrap();
      program_manager.create_quad(QuadOperator::Print, temp_address, None, None);
    }    
  },
}

StartWhile: () = {
  "while" => {
    program_manager.jumps_stack.push(program_manager.instruction_pointer);
  }
}

StartCycle: () = {
  <st_while: StartWhile> "(" <exp: Expresion> ")" => {
    let exp_temp = program_manager.operand_stack.pop().unwrap();
    let exp_type = program_manager.value_table.get_var_type(exp_temp);
    if exp_type != semantic_cube::Type::Bool {
      panic!("Invalid type for while condition");
    }

    program_manager.create_quad(QuadOperator::GotoF, exp_temp, Some(0), None);
    program_manager.jumps_stack.push(program_manager.quadruplets.len() - 1);
  }
}

Cycle: () = {
  <StartCycle> "do"  <Body> => {
    let end_jump = program_manager.jumps_stack.pop().unwrap();
    let false_jump = program_manager.jumps_stack.pop().unwrap();
    program_manager.create_quad(QuadOperator::Goto, false_jump, None, None);
    program_manager.fill_quad(end_jump, program_manager.instruction_pointer);
  }, 
}

StartCondition: () = {
  "if" "(" <exp:Expresion> ")" =>  {
    let exp_temp = program_manager.operand_stack.pop().unwrap();
    let exp_type = program_manager.value_table.get_var_type(exp_temp);
    if exp_type != semantic_cube::Type::Bool {
      panic!("Invalid type for if condition");
    }

    program_manager.create_quad(QuadOperator::GotoF, exp_temp, Some(0), None);
    program_manager.jumps_stack.push(program_manager.quadruplets.len() - 1);
  }
}

ElseClause: () = {
  "else" => {
    program_manager.create_quad(QuadOperator::Goto, 0, None, None);
    let false_jump = program_manager.jumps_stack.pop().unwrap();
    program_manager.fill_quad(false_jump, program_manager.instruction_pointer);
    program_manager.jumps_stack.push(program_manager.instruction_pointer - 1);
  }
}

ElseCondition: Option<()> = {
  (<ElseClause> <Body>) => Some(()),
  => None,
}

Condition: () = {
  <start: StartCondition> <body: Body> <_else: ElseCondition> => {
    let end_jump = program_manager.jumps_stack.pop().unwrap();
    program_manager.fill_quad(end_jump, program_manager.instruction_pointer);
  }
}

StartFCall: () = {
  <id: Id> => {
    let function_id = *program_manager
      .function_ids
      .iter()
      .find(|(_, v)| **v == id.clone())  
      .map(|(k, _)| k)           
      .unwrap();                 

    program_manager.create_quad(QuadOperator::Memory, function_id, None, None);
    program_manager.curr_function.push(id);
  }
}

EndFCall: () = {
  ";" => {
    let function_id = *program_manager
      .function_ids
      .iter()
      .find(|(_, v)| **v == *program_manager.curr_function.top().unwrap())  
      .map(|(k, _)| k)           
      .unwrap();                 

    program_manager.create_quad(QuadOperator::GoSub, function_id, None, None);
    program_manager.curr_function.pop();
  }
}

FCallParameters: () = {
  "(" <args: ExpList> ")" => {


  }
}


FCall: () = {
  <function_id: StartFCall> <function_parameters: FCallParameters>  <end_fn:EndFCall> => {
  },
}

Body: () = {
 "{" Statement* "}",
}

Type: semantic_cube::Type = {
  <val: "intType"> => semantic_cube::Type::Int,
  <val: "floatType"> => semantic_cube::Type::Float,
}

Id: String = {
  <val: "id"> => {
    match val {
        Token::Id(ref name) => name.clone(),
        _ => panic!("Invalid identifier"),
      }
  },
}

// Modified to return a vector of identifiers
Identifier: Vec<String> = {
    <first: Id> <rest: ("," <Id>)*> => {
        let mut ids = vec![first];
        for id in rest {
            ids.push(id);
        }
        ids
    },
};

VarsPrime: Vec<semantic_tables::VariableInfo> = {
  <ids: Identifier> <colon: ":"> <val:Type> <semicolon: ";"> => {
    let mut variables_info = vec![];
    for id in ids {
      let id_value = id.clone();
      let var_scope = match program_manager.curr_function.top().unwrap().as_str() {
        "main" => "global".to_string(),
        _ => "local".to_string(),
      };
      let address = match val {
        semantic_cube::Type::Int => program_manager.value_table.insert_integer(0, &var_scope),
        semantic_cube::Type::Float => program_manager.value_table.insert_float(0.0, &var_scope),
        _ => panic!("Invalid type"),
      };
      let _var_type: semantic_tables::VarType = match val {
        semantic_cube::Type::Int => semantic_tables::VarType::Int,
        semantic_cube::Type::Float => semantic_tables::VarType::Float,
        _ => panic!("Invalid type"),
      };
      let var_info = semantic_tables::VariableInfo 
        { value: match _var_type {
          semantic_tables::VarType::Int => semantic_tables::VarValue::Int(0),
          semantic_tables::VarType::Float => semantic_tables::VarValue::Float(0.0),
        }, var_type: _var_type, name: id_value.clone(), address: address  };
      
      variables_info.push(var_info);
    }   
    variables_info
  },    
}

Vars: Vec<Vec<semantic_tables::VariableInfo>> = {
  "var" <vars:VarsPrime+> => vars,
}

Param: semantic_tables::FunctionParam = {
  <id: Id> ":" <val: Type> => {
    let _var_type: semantic_tables::VarType = match val {
      semantic_cube::Type::Int => semantic_tables::VarType::Int,
      semantic_cube::Type::Float => semantic_tables::VarType::Float,
      _ => panic!("Invalid type"),
    };
    semantic_tables::FunctionParam { var_type: _var_type, name: id.clone() }
  },
}

Params: Vec<semantic_tables::FunctionParam> = {
  <first: Param> <rest: ("," <Param>)*> => {
    let mut param_vector = vec![first];
    for param in rest {
      param_vector.push(param);
    }
    param_vector
  },
  => {
    Vec::new()
  }
}

FunctionId: String = {
  <id: Id> => {
    if program_manager.tabla_funciones.contains_key(&id) {
      panic!("Function Id: {} already registered", id);
    }
    program_manager.curr_function.push(id.clone());
    *program_manager.value_table.counters.entry(String::from("function_ids")).or_insert(-1) += 1;
    program_manager.function_ids.insert(*program_manager.value_table.counters.get("function_ids").unwrap_or(&0) as i32, id.clone());
    program_manager.jumps_stack.push(program_manager.instruction_pointer);

    id
  }
}

EndFunction: () = {
  ";" => {
    program_manager.create_quad(QuadOperator::EndFunc, 0, None, None);
    program_manager.curr_function.pop();
  }
}

FunctionParams: () = {
  "(" <_params: Params> ")" => {
      let mut temp_tabla_vars: HashMap<String, semantic_tables::VariableInfo> = HashMap::new();
      for param in &_params {
        if temp_tabla_vars.contains_key(&param.name) {
          panic!("Variable {} is already declared in the params of the function {}", param.name, program_manager.curr_function.top().unwrap());
        }

        let address = program_manager.value_table.insert_integer(0, "local");

        let var_info = semantic_tables::VariableInfo 
          { value: match param.var_type {
            semantic_tables::VarType::Int => semantic_tables::VarValue::Int(0),
            semantic_tables::VarType::Float => semantic_tables::VarValue::Float(0.0),
          }, var_type: param.var_type.clone(), name: param.name.clone(), address: address  };
          temp_tabla_vars.insert(param.name.clone(), var_info);
      }

    program_manager.tabla_funciones.insert(program_manager.curr_function.top().unwrap().clone(), 
      semantic_tables::FunctionInfo { 
          name: program_manager.curr_function.top().unwrap().to_string(), params: _params, 
          vars: temp_tabla_vars, vars_amount: vec![0,0],
          start_address: program_manager.jumps_stack.pop().unwrap()
          });
  }
}

FunctionVars: () = {
   <vars: Vars?> => {
    let func_table = & mut program_manager.tabla_funciones.get_mut(program_manager.curr_function.top().unwrap().as_str()).unwrap();
    
    for var in vars.unwrap_or(vec![]) {
      for var_info in var {
        if func_table.vars.contains_key(&var_info.name) {
          panic!("Variable {} is already declared either in the params or in the function", var_info.name);
        }

        func_table.vars.insert(var_info.name.clone(), var_info.clone());
      }
    }
    func_table.vars_amount[0] = *program_manager.value_table.counters.get("int_local").unwrap_or(&0) as i32;
    func_table.vars_amount[1] = *program_manager.value_table.counters.get("float_local").unwrap_or(&0) as i32;
    program_manager.value_table.clear_local_vars();
   }
}

Funcs: () = {
  "void" <id: FunctionId>  <func_params: FunctionParams> "[" <func_vars: FunctionVars> <body:Body> "]" <end_func: EndFunction> => {
  },
}

VarsProgram: () = {
  <vars: Vars?> => {
    let mut temp_tabla_vars: HashMap<String, semantic_tables::VariableInfo> = HashMap::new();
    for var in vars.unwrap_or(vec![]) {
      for var_info in var {
        if temp_tabla_vars.contains_key(&var_info.name){
          panic!("Global variable {} is already declared", var_info.name);
        }
        temp_tabla_vars.insert(var_info.name.clone(), var_info.clone());
      }
    }

    program_manager.tabla_funciones.insert("main".to_string(), 
      semantic_tables::FunctionInfo { 
          name: "main".to_string(), params: vec![], 
          vars: temp_tabla_vars.clone(), vars_amount: vec![],
          start_address: 0
           });
  },
}

StartProgram: () = {
  "program" <id: Id> ";" => {
    program_manager.curr_function.push(String::from("main"));
    program_manager.create_quad(QuadOperator::Goto, 0, None, None);
  }
}

StartMain: () = {
  "main" => {
    program_manager.fill_quad(0, program_manager.instruction_pointer);
  }
}

pub Program: () = {
  <start_program: StartProgram> <vars: VarsProgram> <funcs: Funcs*> <st_main: StartMain>  <body: Body>  <end: "end"> => {
    program_manager.create_quad(QuadOperator::EndProgram, 0, None, None);
  },
}