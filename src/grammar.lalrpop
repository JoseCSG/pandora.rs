use crate::compiler::tokens::{Token, LexicalError};
use crate::compiler::semantic_cube;
use crate::compiler::semantic_tables;
use std::collections::HashMap;
use crate::compiler::program_manager::ProgramManager;
use crate::compiler::quadruplets::{QuadOperator, convert_semantic_op_to_quad_op};

grammar<'input>(program_manager: &'input mut ProgramManager);

extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    "program" => Token::Program,
    "main" => Token::Main,
    "end" => Token::End,
    "print" => Token::Print,
    "var" => Token::Var,
    "void" => Token::Void,
    "while" => Token::While,
    "do" => Token::Do,
    "if" => Token::If,
    "else" => Token::Else,
    "id" => Token::Id(_String),
    "intType" => Token::IntDatatype,
    "floatType" => Token::FloatDatatype,
    "number" => Token::Number(_i32),
    "float" => Token::Float(_f32),
    "string" => Token::String(_String),
    "+" => Token::OpAdd,
    "-" => Token::OpSub,
    "*" => Token::OpMul,
    "/" => Token::OpDiv,
    ">" => Token::Gt,
    "<" => Token::Lt,
    "!=" => Token::Ne,
    "=" => Token::Eq,
    ":" => Token::Colon,
    ";" => Token::Semicolon,
    "," => Token::Comma,
    "(" => Token::LParen,
    ")" => Token::RParen,
    "{" => Token::LBrace,
    "}" => Token::RBrace,
    "[" => Token::LBracket,
    "]" => Token::RBracket,
    "." => Token::Dot,
  }

}

Cte: i32 = {
  <val: "number"> => {
    let cte_val = match val {
      Token::Number(ref num) => num.clone(),
      _ => panic!("Invalid constant"),
    };

    program_manager.value_table.insert_cte_int(cte_val)
  },
  <val: "float"> => {
    let cte_val = match val {
      Token::Float(ref num) => num.clone(),
      _ => panic!("Invalid constant"),
    };
    program_manager.value_table.insert_cte_float(cte_val)
  }
}

CteString: i32 = {
  <val: "string"> => {
    let str_val =match val {
      Token::String(ref str) => str.clone(),
      _ => panic!("Invalid constant"),
    };
    program_manager.value_table.insert_cte_string(str_val.clone())
  },
}

OpAditivo: semantic_cube::Operator = {
  <op: "+"> => {
    program_manager.operator_stack.push(semantic_cube::Operator::Add);
    semantic_cube::Operator::Add
  },
  <op: "-"> => {
    program_manager.operator_stack.push(semantic_cube::Operator::Subtract);
    semantic_cube::Operator::Subtract
  }
}

OpMultiplicativo: semantic_cube::Operator = {
  <op: "*"> => {
    program_manager.operator_stack.push(semantic_cube::Operator::Multiply);
    semantic_cube::Operator::Multiply
  },
  <op: "/"> => {
    program_manager.operator_stack.push(semantic_cube::Operator::Divide);
    semantic_cube::Operator::Divide
  },
}

OpLogico: semantic_cube::Operator = {
  <op: "<"> => {
    program_manager.operator_stack.push(semantic_cube::Operator::LessThan);
    semantic_cube::Operator::LessThan
  },
  <op: ">"> => {
    program_manager.operator_stack.push(semantic_cube::Operator::GreaterThan);
    semantic_cube::Operator::GreaterThan
  },
  <op: "!="> => {
    program_manager.operator_stack.push(semantic_cube::Operator::NotEqual);
    semantic_cube::Operator::NotEqual
  },
}

//TODO: Build AST to return value
pub Expresion: (semantic_cube::Type, i32) = {
  <left: Exp> <op: OpLogico> <right: Exp> => {
    let right_address = program_manager.operand_stack.pop().unwrap();
    let left_address = program_manager.operand_stack.pop().unwrap();
    let res_type = program_manager.cubo.get_type(left.0, op, right.0);

    let temp_address = match res_type {
      semantic_cube::Type::Int => program_manager.new_temp(semantic_cube::Type::Int),
      semantic_cube::Type::Float => program_manager.new_temp(semantic_cube::Type::Float),
      _ => panic!("Invalid type"),
    };

    let quad_op = convert_semantic_op_to_quad_op(op);

    program_manager.create_quad(quad_op, left_address, Some(right_address), Some(temp_address));
    program_manager.operand_stack.push(temp_address);

    (res_type, temp_address)

  },
  <exp: Exp> => exp,
};

Exp: (semantic_cube::Type, i32) = {
  <left: Exp> <op: OpAditivo> <right: Termino> => {
    let right_address = program_manager.operand_stack.pop().unwrap();
    let left_address = program_manager.operand_stack.pop().unwrap();
    let res_type = program_manager.cubo.get_type(left.0, op, right.0);

    let temp_address = match res_type {
      semantic_cube::Type::Int => program_manager.new_temp(semantic_cube::Type::Int),
      semantic_cube::Type::Float => program_manager.new_temp(semantic_cube::Type::Float),
      _ => panic!("Invalid type"),
    };

    let op_str = match op {
      semantic_cube::Operator::Add => "+",
      semantic_cube::Operator::Subtract => "-",
      _ => panic!("Invalid operator"),
    };

    program_manager.polish_vector.push(op_str.to_string());

    let quad_op = convert_semantic_op_to_quad_op(op); 

    program_manager.create_quad(quad_op, left_address, Some(right_address), Some(temp_address));
    program_manager.operand_stack.push(temp_address);

    (res_type, temp_address)
  },
  <term: Termino> => term,
}

Termino: (semantic_cube::Type, i32) = {
  <left: Termino> <op: OpMultiplicativo> <right: Factor> => {
    let right_address = program_manager.operand_stack.pop().unwrap();
    let left_address = program_manager.operand_stack.pop().unwrap();
    let res_type = program_manager.cubo.get_type(left.0, op, right.0);

    let temp_address = match res_type {
      semantic_cube::Type::Int => program_manager.new_temp(semantic_cube::Type::Int),
      semantic_cube::Type::Float => program_manager.new_temp(semantic_cube::Type::Float),
      _ => panic!("Invalid type"),
    };

    let quad_op = convert_semantic_op_to_quad_op(op);
    program_manager.create_quad(quad_op, left_address, Some(right_address), Some(temp_address));

    let op_str = match op {
      semantic_cube::Operator::Multiply => "*",
      semantic_cube::Operator::Divide => "/",
      _ => panic!("Invalid operator"),
    };


    program_manager.polish_vector.push(op_str.to_string());
    program_manager.operand_stack.push(temp_address);
    (res_type, temp_address)
  },
  <factor: Factor> => factor
}

Factor: (semantic_cube::Type, i32) = {
  "(" <exp: Expresion> ")" => exp,
  <op_add: OpAditivo> <val: Factor> => {
    // Implement later with variable table
    (semantic_cube::Type::Int, 0)
  
  },
  <val: Id> => {
    let var_info = program_manager.tabla_funciones.get("main").unwrap().vars.get(&val).unwrap();
    program_manager.operand_stack.push(var_info.address);
    program_manager.polish_vector.push(var_info.name.clone());
    let var_type = match var_info.var_type {
      semantic_tables::VarType::Int => semantic_cube::Type::Int,
      semantic_tables::VarType::Float => semantic_cube::Type::Float,
    };
    (var_type, var_info.address)
  },
  <val: Cte> => {
    program_manager.operand_stack.push(val);
    program_manager.polish_vector.push(val.to_string());
    (semantic_cube::Type::Int, val)
  }
}

Statement: () = {
  <Assign>,
  <Condition>,
  <Cycle>,
  <Print>,
  <FCall>,
}

Assign: () = {
  <id: Id> "=" <exp: Expresion> ";" => {
    let var_info = program_manager.tabla_funciones.get("main").unwrap().vars.get(&id).unwrap();
    program_manager.create_quad(QuadOperator::Assign, var_info.address, Some(exp.1), None);
  },
}

ExpList: Vec<(semantic_cube::Type, i32)> = {
  <start: Expresion> <rest: ("," <Expresion>)*> => {
    let mut exp_list = vec![start];
    for exp in rest {
      exp_list.push(exp);
    }
    println!("ExpList: {:?}", exp_list);
    exp_list
  }
}


PrintPrime: Vec<(semantic_cube::Type, i32)> = {
  <str: CteString> => {
    println!("String: {}", str);
    vec![(semantic_cube::Type::Int, str)]
  },
  <args: ExpList> => args,
}

Print: () = {
  "print" "(" <exps: PrintPrime> ")" ";" => {
    for exp in exps {
      program_manager.create_quad(QuadOperator::Print, exp.1, None, None);
    }
  },
}

Cycle: () = {
  "while" "(" <Expresion> ")" "do"  <Body>, 
}

Condition: () = {
  "if" "(" <exp:Expresion> ")" <body: Body> ("else" <Body>)? => {

  },
}

FCall: () = {
  <id: Id> "(" <args: ExpList> ")" ";" => {

  },
}

Body: String = {
 "{" Statement* "}"  => "Body".to_string(),
}

Type: semantic_cube::Type = {
  <val: "intType"> => semantic_cube::Type::Int,
  <val: "floatType"> => semantic_cube::Type::Float,
}

Id: String = {
  <val: "id"> => {
    match val {
        Token::Id(ref name) => name.clone(),
        _ => panic!("Invalid identifier"),
      }
  },
}

// Modified to return a vector of identifiers
Identifier: Vec<String> = {
    <first: Id> <rest: ("," <Id>)*> => {
        let mut ids = vec![first];
        for id in rest {
            ids.push(id);
        }
        ids
    },
};

VarsPrime: Vec<semantic_tables::VariableInfo> = {
  <ids: Identifier> <colon: ":"> <val:Type> <semicolon: ";"> => {
    let mut variables_info = vec![];
    for id in ids {
      let id_value = id.clone();
      let address = match val {
        semantic_cube::Type::Int => program_manager.value_table.insert_integer(0, "global"),
        semantic_cube::Type::Float => program_manager.value_table.insert_float(0.0, "global"),
        _ => panic!("Invalid type"),
      };
      let _var_type: semantic_tables::VarType = match val {
        semantic_cube::Type::Int => semantic_tables::VarType::Int,
        semantic_cube::Type::Float => semantic_tables::VarType::Float,
        _ => panic!("Invalid type"),
      };
      let var_info: semantic_tables::VariableInfo = semantic_tables::VariableInfo 
        { value: match _var_type {
          semantic_tables::VarType::Int => semantic_tables::VarValue::Int(0),
          semantic_tables::VarType::Float => semantic_tables::VarValue::Float(0.0),
        }, var_type: _var_type, name: id_value.clone(), address: address  };
      
      variables_info.push(var_info);
    }   
    variables_info
  },    
}

Vars: Vec<Vec<semantic_tables::VariableInfo>> = {
  "var" <vars:VarsPrime+> => vars,
}

Param: semantic_tables::FunctionParam = {
  <id: Id> ":" <val: Type> => {
    let _var_type: semantic_tables::VarType = match val {
      semantic_cube::Type::Int => semantic_tables::VarType::Int,
      semantic_cube::Type::Float => semantic_tables::VarType::Float,
      _ => panic!("Invalid type"),
    };
    semantic_tables::FunctionParam { var_type: _var_type, name: id.clone() }
  },
}

Params: Vec<semantic_tables::FunctionParam> = {
  <first: Param> <rest: ("," <Param>)*> => {
    let mut param_vector = vec![first];
    for param in rest {
      param_vector.push(param);
    }
    param_vector
  },
}

FunctionId: String = {
  <id: Id> => {
    if program_manager.tabla_funciones.contains_key(&id) {
      panic!("Function Id: {} already registered", id);
    }
    id
  }
}

//TODO: Create analogic points to create the function into the function_table, 
// then add the params, and vars to the var_table of the function 
Funcs: () = {
  "void" <id: FunctionId> "(" <_params: Params> ")" "[" <vars: Vars?> <body:Body> "]" ";" => {
    let mut temp_tabla_vars: HashMap<String, semantic_tables::VariableInfo> = HashMap::new();
    for param in &_params {
      if temp_tabla_vars.contains_key(&param.name) {
        panic!("Variable {} is already declared in the params of the function {}", param.name, id.to_string());
      }

      let address = program_manager.value_table.insert_integer(0, "local");

      let var_info: semantic_tables::VariableInfo = semantic_tables::VariableInfo 
        { value: match param.var_type {
          semantic_tables::VarType::Int => semantic_tables::VarValue::Int(0),
          semantic_tables::VarType::Float => semantic_tables::VarValue::Float(0.0),
        }, var_type: param.var_type.clone(), name: param.name.clone(), address: address  };
        temp_tabla_vars.insert(param.name.clone(), var_info);
    }
    
    for var in vars.unwrap_or(vec![]) {
      for var_info in var {
        if temp_tabla_vars.contains_key(&var_info.name) {
          panic!("Variable {} is already declared either in the params or in the function", var_info.name);
        }

        temp_tabla_vars.insert(var_info.name.clone(), var_info.clone());
      }
    }
    program_manager.tabla_funciones.insert(id.to_string(), semantic_tables::FunctionInfo { name: id.to_string(), params: _params, vars: temp_tabla_vars });
  },
}

VarsProgram: () = {
  <vars: Vars?> => {
    let mut temp_tabla_vars: HashMap<String, semantic_tables::VariableInfo> = HashMap::new();
    for var in vars.unwrap_or(vec![]) {
      for var_info in var {
        if temp_tabla_vars.contains_key(&var_info.name){
          panic!("Global variable {} is already declared", var_info.name);
        }
        temp_tabla_vars.insert(var_info.name.clone(), var_info.clone());
      }
    }

    program_manager.tabla_funciones.insert("main".to_string(), semantic_tables::FunctionInfo { name: "main".to_string(), params: vec![], vars: temp_tabla_vars.clone() });
  },
}

pub Program: String = {
  "program" <id: Id> ";" <vars: VarsProgram> <funcs: Funcs*> <st_main: "main">  <body: Body>  <end: "end"> => {
    println!("{:?}", program_manager.quadruplets);
    println!("{:?}", program_manager.polish_vector);
    format!("Program exit with value {}", 0)
  },
}