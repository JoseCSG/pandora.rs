use crate::tokens::{Token, LexicalError};

grammar;

extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    "program" => Token::Program,
    "main" => Token::Main,
    "end" => Token::End,
    "print" => Token::Print,
    "var" => Token::Var,
    "void" => Token::Void,
    "while" => Token::While,
    "do" => Token::Do,
    "if" => Token::If,
    "else" => Token::Else,
    "id" => Token::Id,
    "intType" => Token::IntDatatype,
    "floatType" => Token::FloatDatatype,
    "number" => Token::Number,
    "float" => Token::Float,
    "string" => Token::String,
    "+" => Token::OpAdd,
    "-" => Token::OpSub,
    "*" => Token::OpMul,
    "/" => Token::OpDiv,
    ">" => Token::Gt,
    "<" => Token::Lt,
    "!=" => Token::Ne,
    "=" => Token::Eq,
    ";" => Token::Semicolon,
    "," => Token::Comma,
    "(" => Token::LParen,
    ")" => Token::RParen,
    "{" => Token::LBrace,
    "}" => Token::RBrace,
    "[" => Token::LBracket,
    "]" => Token::RBracket,
    "." => Token::Dot,
  }
}

pub Expr: String = {
    <l:Expr> "+" <r:Factor> => "Operacion suma".to_string(),
    <l:Expr> "-" <r:Factor> => format!("{} - {}",l, r),
    Factor,
};

Factor: String = {
    <l:Factor> "*" <r:Term> =>  format!("{} * {}",l, r),
    <l:Factor> "/" <r:Term> =>  format!("{} / {}",l, r),
    Term,
};

Term: String = {
    "(" <Expr> ")",
    <name: "id"> => name.to_string(),
    <val: "number"> => val.to_string(),
};